module output_m

   use datatypes, only: particles
   use hdf5
   use hdf5_parallel_io_helper_m, only: hdf5_parallel_write, hdf5_fileopen_write, hdf5_attribute_write
   use param, only: f, dim, outputf

   private
   public:: output

contains

   !==============================================================================================================================
   subroutine output(output_directory, itimestep, save_step, ntotal, nvirt, itype, ind, p, rho, x, vx)
      ! Subroutine to write data to disk. Called intermittently, determined by save_step supplied at run-time

      implicit none
      character(*), intent(in):: output_directory
      integer, intent(in):: itimestep, save_step, ntotal, nvirt, itype(ntotal+nvirt), ind(ntotal+nvirt)
      real(f), intent(in):: p(ntotal+nvirt), rho(ntotal+nvirt), x(dim,ntotal+nvirt), vx(dim,ntotal+nvirt)
      integer(HID_T):: file_id, real_group_id, virt_group_id
      character(len=4)::number
      integer:: n, ierr, i
      type(particles), allocatable:: ptmp(:)
      integer(HSIZE_T):: global_dims(2)

      n = itimestep/save_step
      write (number, '(I4.4)') n

      ! Initializing hdf5 interface
      call h5open_f(ierr)

      ! Creating output file
      call h5fcreate_f(trim(output_directory)//"/sph_out"//number//".h5", h5F_ACC_TRUNC_F, file_id, ierr)

      ! Creating groups for each of real, virtual, and ghost particles
      call h5gcreate_f(file_id, "real", real_group_id, ierr)

      call h5gcreate_f(file_id, "virt", virt_group_id, ierr)
      
      allocate(ptmp(max(ntotal,nvirt)))
      
      n = 0
      do i = 1,ntotal+nvirt
         if (itype(i)==1) then
            n = n + 1
            ptmp(n)%itype = itype(i)
            ptmp(n)%indglob = ind(i)
            ptmp(n)%p = p(i)
            ptmp(n)%rho = rho(i)
            ptmp(n)%x = x(:,i)
            ptmp(n)%vx = vx(:,i)
         end if
      end do
      
      global_dims(1) = dim
      global_dims(2) = n
      call hdf5_attribute_write(real_group_id, n)
      call write_particle_data(real_group_id, global_dims, ptmp(1:n))
      
      n = 0
      do i = 1,ntotal+nvirt
         if (itype(i) < 0) then
            n = n + 1
            ptmp(n)%itype = itype(i)
            ptmp(n)%indglob = ind(i)
            ptmp(n)%p = p(i)
            ptmp(n)%rho = rho(i)
            ptmp(n)%x = x(:,i)
            ptmp(n)%vx = vx(:,i)
         end if
      end do

      global_dims(1) = dim
      global_dims(2) = n
      call hdf5_attribute_write(virt_group_id, n)
      call write_particle_data(virt_group_id, global_dims, ptmp(1:n))

      call h5gclose_f(real_group_id, ierr)
      call h5gclose_f(virt_group_id, ierr)
      call h5fclose_f(file_id, ierr)

   end subroutine output

   !==============================================================================================================================
   subroutine write_particle_data(gid_in, gdims, parts)

      implicit none
      integer(HID_T), intent(in):: gid_in
      integer(HSIZE_T), intent(in):: gdims(2)
      integer(HSSIZE_T):: ldispl(2) = 0
      type(particles), intent(in):: parts(:)
      integer:: nelem, i
      integer, allocatable:: int_tmp(:, :)
      real(f), allocatable:: dbl_tmp(:, :)

      nelem = size(parts, 1)
      allocate (int_tmp(nelem, 1), dbl_tmp(nelem, 1))

      ! writing 1D arrays
      int_tmp(:, 1) = parts(:)%indglob
      call hdf5_parallel_write(gid_in, 'ind', ldispl(2), gdims(2), int_tmp(:, 1))
      int_tmp(:, 1) = 1
      call hdf5_parallel_write(gid_in, 'procid', ldispl(2), gdims(2), int_tmp(:, 1))
      int_tmp(:, 1) = parts(:)%itype
      call hdf5_parallel_write(gid_in, 'type', ldispl(2), gdims(2), int_tmp(:, 1))
      dbl_tmp(:, 1) = parts(:)%rho
      call hdf5_parallel_write(gid_in, 'rho', ldispl(2), gdims(2), dbl_tmp(:, 1))
      dbl_tmp(:, 1) = parts(:)%p
      call hdf5_parallel_write(gid_in, 'p', ldispl(2), gdims(2), dbl_tmp(:, 1))

      deallocate (int_tmp, dbl_tmp)

      ! Converting position data to contiguous array
      allocate (dbl_tmp(dim, nelem))

      do i = 1, nelem
         dbl_tmp(:, i) = parts(i)%x(:)
      end do

      ! writing position
      call hdf5_parallel_write(gid_in, 'x', ldispl, gdims, dbl_tmp)

      ! Converting velocity data to contiguous array
      do i = 1, nelem
         dbl_tmp(:, i) = parts(i)%vx(:)
      end do

      ! writing velocity
      call hdf5_parallel_write(gid_in, 'v', ldispl, gdims, dbl_tmp)

      ! cleanup
      deallocate (dbl_tmp)

   end subroutine write_particle_data

end module output_m
