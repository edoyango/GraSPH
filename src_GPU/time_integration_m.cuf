module time_integration_m

   use datatypes, only: particles, interactions, time_tracking
   use param, only: f, dim, rh0, gamma, c, dt, mass, g, irho, hsml

   use cudafor

   use input_m, only: vmat_update, update_ghost_part, generate_ghost_part
   use flink_list_m, only: flink_list
   use output_m, only: output
   use summary_m, only: print_update
   use single_step_m, only: single_step_kernel

   private
   public:: time_integration

contains

   !==============================================================================================================================
   subroutine time_integration(print_step, save_step, maxtimestep, timings, maxinter, maxn, ntotal, nvirt, &
                               niac, pairs, itype, ind, p, rho, x, vx)
      ! Subroutine responsible for the main time-integration loop

      implicit none
      integer, intent(in):: print_step, save_step, maxtimestep, maxinter, maxn, ntotal, nvirt
      type(time_tracking), intent(inout):: timings
      integer, intent(inout):: itype(maxn), ind(maxn)
      real(f), intent(inout):: p(maxn), rho(maxn), x(dim,maxn), vx(dim,maxn)
      integer, intent(out):: niac
      type(interactions), intent(out):: pairs(maxinter)
      integer:: i, j, k, d, n, istat, itimestep
      integer, device:: ntotal_d, nvirt_d, niac_d
      integer, allocatable, device:: itype_d(:), ind_d(:)
      real(f), allocatable, device:: p_d(:), rho_d(:), x_d(:, :), vx_d(:, :), v_min(:, :), rho_min(:), dvxdt(:, :), &
         drho(:), vw(:), xlast(:,:), prho(:)
      type(interactions), allocatable, device:: pairs_d(:)
      real(f):: time
      real:: tmpTime
      type(cudaEvent):: startEvent, stopEvent, startOutputEvent, stopOutputEvent, startTestEvent, stopTestEvent

      ! creating cuda events and recording start event
      istat = cudaEventCreate(startEvent)
      istat = cudaEventCreate(stopEvent)
      istat = cudaEventCreate(startOutputEvent)
      istat = cudaEventCreate(stopOutputEvent)
      istat = cudaEventCreate(startTestEvent)
      istat = cudaEventCreate(stopTestEvent)

      ! Allocating device arrays
      allocate( itype_d(maxn), ind_d(maxn), p_d(maxn), rho_d(maxn), x_d(dim, maxn), vx_d(dim, maxn), &
         pairs_d(maxinter), prho(maxn))
      
      ! Allocating arrays relevant to solver
      allocate (v_min(dim, maxn), rho_min(maxn), dvxdt(dim, maxn), drho(maxn), vw(maxn))

      ! Transferring necessary data to GPU
      itype_d = itype
      ind_d = ind
      itype_d = itype
      p_d = p
      rho_d = rho
      x_d = x
      vx_d = vx
      ntotal_d = ntotal
      nvirt_d = nvirt

      !$cuf kernel do <<<*,512>>>
      do i = 1, maxn
         dvxdt(1:dim-1, i) = 0._f
         dvxdt(dim,i) = -g
         drho(i) = 0._f
      end do

      istat = cudaEventRecord(startEvent, 0)

      ! Time-integration (Leap-Frog)
      time = 0._f
      do itimestep = 1, maxtimestep

         !Interaction parameters, calculating neighboring particles
         call flink_list(ind_d, itype_d, x_d, vx_d, rho_d, p_d, drho, dvxdt, maxinter, maxn, niac_d, pairs_d)

         ! Save particles' velocity, density information at start of time-step
         !$cuf kernel do <<<*,512>>>
         do i = 1, maxn
            rho_min(i) = rho_d(i)
            rho_d(i) = rho_d(i) + 0.5_f*dt*drho(i)
            v_min(:, i) = vx_d(:,i)
            vx_d(:,i) = vx_d(:,i) + 0.5_f*dt*dvxdt(:, i)
            if (itype_d(i)<0) then
               vw(i) = 0._f
               rho_d(i) = 0._f
               vx_d(:,i) = 0._f
            end if
         end do

         call vmat_update<<< niac_d/128 + 1, 128>>>(maxinter, maxn, niac_d, pairs_d, vw, itype_d, rho_d, vx_d)

         !$cuf kernel do <<<*, *>>>
         do i = 1,maxn
            if (itype_d(i)<0) then
               rho_d(i) = rho_d(i)/vw(i)
               vx_d(:,i) = vx_d(:,i)/vw(i)
            end if
            ! p_d(i) = rh0*c**2*((rho_d(i)/rh0)**gamma - 1._f)/gamma
            prho(i) = rh0*c**2*((rho_d(i)/rh0)**gamma - 1._f)/(gamma*rho_d(i)*rho_d(i))
            dvxdt(1:dim-1, i) = 0._f
            dvxdt(dim,i) = -g
            drho(i) = 0._f
         end do

            ! launching GPU kernel to calculate accelerations and density changes
            call single_step_kernel <<< niac_d/128 + 1, 128 >>> (ind_d, itype_d, x_d, vx_d, rho_d, prho, maxinter, maxn, niac_d, pairs_d, dvxdt, drho)

            ! launching GPU kernel to update particles' speed and density
            !$cuf kernel do
            do i = 1, maxn
               rho_d(i) = rho_min(i) + dt*drho(i)
               vx_d(:,i) = v_min(:,i) + dt*dvxdt(:,i)
               if (itype_d(i)>0) x_d(:,i) = x_d(:,i) + dt*vx_d(:,i)
            end do

         ! end do

         ! Update time
         time = time + dt

         ! start timing of write time
         if (mod(itimestep, save_step)==0 .or. mod(itimestep,print_step)==0) then 
         
            istat = cudaEventRecord(startOutputEvent, 0)

            ! write output data
            if (mod(itimestep, save_step) .eq. 0) then

               ! update pressure for output
               !$cuf kernel do
               do i = 1, maxn
                  p_d(i) =  rh0*c**2*((rho_d(i)/rh0)**gamma - 1._f)/gamma
               end do

               ! transfer particle data from GPU to CPU
               itype = itype_d
               ind = ind_d
               p = p_d
               rho = rho_d
               x = x_d
               vx = vx_d
               call output(itimestep, save_step, ntotal, nvirt, itype, ind, p, rho, x, vx)
            end if

            if (mod(itimestep, print_step) .eq. 0) then
               ! recording elapsed wall time to print to terminal
               timings%t_wall = RecordElapsedTime(startEvent, stopEvent, 0)/1000.
               istat = cudaEventRecord(startOutputEvent, 0)
               niac = niac_d
               if (mod(itimestep, save_step) .ne. 0) ind = ind_d
               call print_update(itimestep, maxtimestep, timings, time, ntotal, nvirt, niac, pairs_d, ind)

            end if
         
            ! End timing of output time
            timings%t_output = timings%t_output + RecordElapsedTime(startOutputEvent, stopOutputEvent, 0)/1000.

         end if

      end do

      ! Ending timing of compute
      timings%t_wall = RecordElapsedTime(startEvent, stopEvent, 0)/1000.

   end subroutine time_integration

   !===============================================================================================================================
   function RecordElapsedTime(StartEvent, StopEvent, streamID) result(ElapsedTime)

      implicit none
      type(cudaEvent), intent(in):: StartEvent, StopEvent
      integer, intent(in):: streamID
      integer:: istat
      real:: ElapsedTime

      istat = cudaEventRecord(StopEvent, streamID)
      istat = cudaEventSynchronize(stopEvent)
      istat = cudaEventElapsedTime(ElapsedTime, StartEvent, StopEvent)

   end function RecordElapsedTime

end module time_integration_m
