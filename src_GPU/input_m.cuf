module input_m

   use datatypes, only: particles, interactions
   use hdf5
   use hdf5_parallel_io_helper_m, only: hdf5_fileopen_read, hdf5_attribute_read
   use param, only: dim, f, dxo, irho, g, gamma, c, hsml, mass, input_file

   real(f), parameter:: vnorm(dim, 5) = reshape([-1._f, -1._f, -1._f, &
                                                  1._f,  1._f, -1._f, &
                                                 -1._f,  1._f,  1._f, &
                                                  1._f, -1._f,  1._f, &
                                                 -1._f, -1._f,  1._f], [dim, 5])

   public:: read_input_and_allocate

contains

   !==============================================================================================================================
   subroutine allocatePersistentArrays(ntotal, nvirt, maxn, maxinter_perp, maxinter, pairs, itype, ind, p, rho, x, vx)

      implicit none
      integer, intent(in):: ntotal, nvirt, maxinter_perp
      integer, intent(out):: maxn, maxinter
      integer, allocatable, intent(inout):: itype(:), ind(:)
      real(f), allocatable, intent(inout):: p(:), rho(:), x(:,:), vx(:,:)
      type(interactions), allocatable, intent(inout):: pairs(:)

      maxn = ntotal + nvirt!+int(0.2*ntotal)
      maxinter = maxinter_perp*maxn
      allocate( itype(maxn), ind(maxn), p(maxn), rho(maxn), x(dim,maxn), vx(dim,maxn))

   end subroutine allocatePersistentArrays

   !==============================================================================================================================
   subroutine read_input_and_allocate(maxinter_perp, itype, ind, p, rho, x, vx, pairs, maxn, maxinter, ntotal, nvirt)

      implicit none
      integer, intent(in):: maxinter_perp
      integer, allocatable, intent(inout):: itype(:), ind(:)
      real(f), allocatable, intent(inout):: p(:), rho(:), x(:, :), vx(:,:)
      type(interactions), allocatable, intent(inout):: pairs(:)
      integer, intent(out):: ntotal, nvirt, maxn, maxinter
      integer:: i, j, k, d, n, ierr
      real(f):: xi, yi, zi
      integer(HID_T):: fid, gid_r, gid_v
      integer(HSIZE_T):: global_dims(2)

      ! initializing hdf5
      call h5open_f(ierr)

      ! using helper subroutine to open file
      call hdf5_fileopen_read(input_file, fid)

      ! opening real and virtual particle groups in hdf5 file
      call h5gopen_f(fid, 'real', gid_r, ierr)
      call h5gopen_f(fid, 'virt', gid_v, ierr)

      call hdf5_attribute_read(gid_r, ntotal)
      call hdf5_attribute_read(gid_v, nvirt)

      call allocatePersistentArrays(ntotal, nvirt, maxn, maxinter_perp, maxinter, pairs, itype, ind, p, rho, x, vx)

      ! reading real particle data from hdf5 file
      global_dims(1) = dim
      global_dims(2) = ntotal
      if (ntotal /= 0) call read_particle_data_parallel(gid_r, global_dims, itype, ind, p, rho, x, vx)

      global_dims(1) = dim
      global_dims(2) = nvirt
      if (nvirt /= 0) call read_particle_data_parallel(gid_v, global_dims, itype(ntotal+1:ntotal+nvirt), &
         ind(ntotal+1:ntotal+nvirt), p(ntotal+1:ntotal+nvirt), rho(ntotal+1:ntotal+nvirt), &
         x(:, ntotal+1:ntotal+nvirt), vx(:, ntotal+1:ntotal+nvirt))

      ! closing groups and hdf5 file
      call h5gclose_f(gid_r, ierr)
      call h5gclose_f(gid_v, ierr)
      call h5fclose_f(fid, ierr)

      ! closing hdf5
      call h5close_f(ierr)

   end subroutine read_input_and_allocate

   !===============================================================================================================================
   attributes(global) subroutine vmat_update(maxinter, n_p, nij, pij, vw, itype, rho, vx)

      implicit none
      integer, intent(in), value:: maxinter, n_p
      integer, intent(in):: nij, itype(n_p)
      real(f), intent(in):: rho(n_p), vx(dim, n_p)
      type(interactions), intent(in):: pij(maxinter)
      real(f), intent(inout):: vw(n_p)
      integer:: i, j, k, d
      real(f):: tmp, tmp2

      k = blockDim%x*(blockIdx%x - 1) + threadIdx%x

      if (k <= nij) then
         i = pij(k)%i
         j = pij(k)%j
            if (itype(i) < 0 .and. itype(j) > 0) then
               tmp = mass*pij(k)%w/rho(j)
               tmp2 = atomicadd(vw(i), tmp)
               tmp2 = atomicadd(rho(i), mass*pij(k)%w)
               do d = 1,dim
                  tmp2 = atomicadd(vx(d, i), vnorm(d, -itype(i))*vx(d,j)*tmp)
               end do
            else if (itype(j) < 0 .and. itype(i) > 0) then
               tmp = mass*pij(k)%w/rho(i)
               tmp2 = atomicadd(vw(j), tmp)
               tmp2 = atomicadd(rho(j), mass*pij(k)%w)
               do d = 1,dim
                  tmp2 = atomicadd(vx(d, j), vnorm(d, -itype(j))*vx(d,i)*tmp)
               end do
            end if
      end if

   end subroutine vmat_update

   !====================================================================================================================
   subroutine read_particle_data_parallel(gid_in, gdims, itype, ind, p, rho, x, vx)

      use hdf5_parallel_io_helper_m, only: hdf5_parallel_read

      implicit none
      integer(HID_T), intent(in):: gid_in
      integer(HSIZE_T), intent(in):: gdims(2)
      integer, intent(out):: itype(gdims(2)), ind(gdims(2))
      real(f), intent(out):: p(gdims(2)), rho(gdims(2)), x(gdims(1), gdims(2)), vx(gdims(1), gdims(2))
      integer(HSSIZE_T):: ldispl(2) = 0

      ! read 1d arrays
      call hdf5_parallel_read(gid_in, 'ind', ldispl(2), gdims(2), ind)
      
      call hdf5_parallel_read(gid_in, 'type', ldispl(2), gdims(2), itype)

      call hdf5_parallel_read(gid_in, 'rho', ldispl(2), gdims(2), rho)

      call hdf5_parallel_read(gid_in, 'p', ldispl(2), gdims(2), p)
      
      call hdf5_parallel_read(gid_in, 'x', ldispl, gdims, x)

      call hdf5_parallel_read(gid_in, 'v', ldispl, gdims, vx)

   end subroutine read_particle_data_parallel

end module input_m
