module summary_m

   use datatypes, only: time_tracking, interactions
   use param, only: f, tf

   private
   public:: preamble, print_summary, print_update, time_print

contains

   !==============================================================================================================================
   subroutine time_print
      !***************************************************************************************************
      !   TIME_PRINT:      Print out the current date and time.
      !   The standard Fortran 90 routine DATE_AND_TIME is used to get the current
      !   date and time strings.
      !***************************************************************************************************
      implicit none
      integer, parameter :: output = 6

      !Local scalars.
      character(len=8) :: datstr
      character(len=10) :: timstr

      !Get the current date and time.
      call date_and_time(datstr, timstr)

      !Write out the date and time.
      write (output, "(/31x,A)") "Date = "//datstr(7:8)//"/"//datstr(5:6)//"/"//datstr(1:4)
      write (output, "(30x,A)") "Time = "//timstr(1:2)//":"//timstr(3:4)//":"//timstr(5:10)

   end subroutine time_print

   !==================================================================================================================================
   subroutine print_summary(timings)

      implicit none
      type(time_tracking), intent(in):: timings
      integer:: i, j, k, d

      write (*, '(A79)') '================================= TIME SUMMARY ================================'
      write (*, '(A26,F14.7)') 'Average Wall time (s)   = ', timings%t_wall
      write (*, '(A26,F14.7)') 'Average Output time (s) = ', timings%t_output

   end subroutine print_summary

   !==================================================================================================================================
   subroutine print_update(itimestep, maxtimestep, timings, time, ntotal, nvirt, niac, pairs_d, ind)

      use thrust

      implicit none
      integer, intent(in):: itimestep, maxtimestep, ntotal, nvirt, niac, ind(ntotal+nvirt)
      type(time_tracking), intent(in):: timings
      type(interactions), device, intent(in):: pairs_d(niac)
      real(f), intent(in):: time
      integer::  i, k, d
      integer, managed:: ns(ntotal+nvirt), maxp, minp, sumiac, maxiac, miniac, noiac, j

      write (*, '(A79)') '_______________________________________________________________________________'
      write (*, '(A22,I7,A1,I7,9x,A19,F14.7)') '  current time step = ', itimestep, '/', maxtimestep, &
         'current time (s) = ', time
      write (*, '(A65,F14.7)') '                                                  Walltime (s) = ', timings%t_wall
      write (*, '(A79)') '_______________________________________________________________________________'

      !$cuf kernel do (1) <<<*, 1024>>>
      do i = 1,ntotal+nvirt
         ns(i) = 0
      end do

      call countParticleInteractions<<<niac/32+1, 32>>>(niac, pairs_d, ntotal+nvirt, ns)

      !Statistics for the interaction, Print information to screen
      call thrustmaxelem(ns, maxiac, maxp, ntotal+nvirt)
      call thrustminelem(ns, miniac, minp, ntotal+nvirt)
      call thrustcountifzero(ns, noiac, ntotal+nvirt)
      
      write (*, '(A42)') ' >> Statistics: interactions per particle:'
      write (*, '(A14,I7,A23,I4)') '    Particle: ', ind(maxp), ' maximal interactions: ', maxiac
      write (*, '(A14,I7,A23,I4)') '    Particle: ', ind(minp), ' minimal interactions: ', miniac
      write (*, '(A14,F14.7)') '    Average : ', 2.*real(niac)/real(ntotal + nvirt)
      write (*, '(A18,I9)') '    Total pairs : ', niac
      write (*, '(A36,I7)') '    Particles with no interactions: ', noiac

   end subroutine print_update

   !==================================================================================================================================
   attributes(global) subroutine countParticleInteractions(niac, pij, np, ns)

      implicit none
      integer, value, intent(in):: niac, np
      type(interactions), intent(in):: pij(niac)
      integer, intent(inout):: ns(np)
      integer:: k,tmp

      k = blockDim%x*(blockIdx%x - 1) + threadIdx%x

      if (k <= niac) then
         tmp = atomicadd(ns(pij(k)%i), 1)
         tmp = atomicadd(ns(pij(k)%j), 1)
      end if

   end subroutine countParticleInteractions

end module summary_m
