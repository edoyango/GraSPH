module single_step_m
    
    use datatypes, only: interactions
    use globvar, only: maxinter_perp
    use param, only: dim,f,g,mass

	public:: single_step_kernel
    private:: art_visc,ext_force,int_force,con_density
	
contains

	!==============================================================================================================================
    attributes(global) subroutine single_step_kernel(ki,nt,nv,nij,pij,ardvxdt,exdvxdt,indvxdt,codrhodt)
        
        implicit none
        integer,intent(in),value:: ki
        integer,intent(in):: nt,nv,nij(nt+nv)
        type(interactions),intent(in):: pij(maxinter_perp,nt+nv)
        real(f),intent(inout):: ardvxdt(dim,nt+nv),exdvxdt(dim,nt+nv),indvxdt(dim,nt+nv),codrhodt(nt+nv)
        integer:: i,j,k,d
        
        ! Obtaining thread global index (used to assign particle index)
        i = blockDim%x*(blockIdx%x-1)+threadIdx%x
        
        ! Beginning loop over 
        if (i <= nt+nv) then
        
            do k = 1,nij(i)
                if (pij(k,i)%i%itype>0 .and. pij(k,i)%j%itype > 0) then
                
                    call con_density(ki,nt,nv,pij(k,i),codrhodt)
                    
                    call int_force(ki,nt,nv,pij(k,i),indvxdt)
                    
                    call art_visc(ki,nt,nv,pij(k,i),ardvxdt)
                    
                else !if (pij(k,i)%j%itype > 0 .or. pij(k,i)%i%itype>0) then
                    call ext_force(ki,nt,nv,pij(k,i),exdvxdt)
                end if
            end do
        end if
        
    end subroutine single_step_kernel
    
    !=================================================================================
	attributes(device) subroutine art_visc(ki,nt,nv,pair,ardvxdt)
	
		use param, only: alpha,beta,etq,hsml,c
	
		implicit none
		integer,intent(in):: ki,nt,nv
		type(interactions),intent(in):: pair
        real(f),intent(inout):: ardvxdt(dim,nt+nv)
		real(f):: dx(dim),piv(dim),muv,vr,rr,h,mrho,dvx(dim),tmp
        integer:: d
		
		dx(:) = pair%i%x(:) - pair%j%x(:)
        vr = dot_product(pair%i%vx(:)-pair%j%vx(:),dx(:))
		if (vr > 0_f) vr = 0_f
		
		!Artificial viscous force only if v_ij * r_ij < 0
		rr = DOT_PRODUCT(dx(:),dx(:))
		muv  = hsml*vr/(rr + hsml*hsml*etq*etq)
		mrho = 0.5_f*(pair%i%rho + pair%j%rho)
		piv  = (beta*muv - alpha*c)*muv/mrho*pair%dwdx(:)
		
        do d = 1,dim
            tmp = atomicAdd(ardvxdt(d,pair%i%ind),-mass*piv(d))
            tmp = atomicAdd(ardvxdt(d,pair%j%ind),mass*piv(d))
        end do
	
	end subroutine art_visc
	
	!=================================================================================
	attributes(device) subroutine ext_force(ki,nt,nv,pair,exdvxdt)
		
		use param, only: p1,p2,rr0,dd
	
		implicit none
		integer,intent(in):: ki,nt,nv
		type(interactions),intent(in):: pair
        real(f),intent(inout):: exdvxdt(dim,nt+nv)
		real(f):: dx(dim),rr,fo,tmp
        integer:: d
		
		dx(:) = pair%i%x(:) - pair%j%x(:)
		rr = SQRT(SUM(dx(:)*dx(:)))
		
		if (rr.lt.rr0) then
			fo = ((rr0/rr)**p1-(rr0/rr)**p2)/rr**2
            do d = 1,dim
                tmp = atomicAdd(exdvxdt(d,pair%i%ind),dd*dx(d)*fo)
                tmp = atomicAdd(exdvxdt(d,pair%j%ind),-dd*dx(d)*fo)
            end do
		endif
	
	end subroutine ext_force
	
	!=================================================================================
	attributes(device) subroutine int_force(ki,nt,nv,pair,indvxdt)
	
		implicit none
		integer,intent(in):: ki,nt,nv
		type(interactions),intent(in):: pair
        real(f),intent(inout):: indvxdt(dim,nt+nv)
		real(f):: h(dim),tmp
        integer:: d
		
		h = -(pair%i%p/pair%i%rho**2 + pair%j%p/pair%j%rho**2)*pair%dwdx(:)
        do d = 1,dim
            tmp = atomicAdd(indvxdt(d,pair%i%ind),mass*h(d))
            tmp = atomicAdd(indvxdt(d,pair%j%ind),-mass*h(d))
        end do
	
	end subroutine int_force
	
	!=================================================================================
	attributes(device) subroutine con_density(ki,nt,nv,pair,codrhodt)
	
		implicit none
		integer,intent(in):: ki,nt,nv
		type(interactions),intent(in):: pair
        real(f),intent(inout):: codrhodt(nt+nv)
		real(f):: dvx(dim),vcc,tmp
		
		dvx(:) = pair%i%vx(:) - pair%j%vx(:)
    
		vcc = DOT_PRODUCT(dvx(:),pair%dwdx(:))
		
		tmp = atomicAdd(codrhodt(pair%i%ind),mass*vcc)
        tmp = atomicAdd(codrhodt(pair%j%ind),mass*vcc)
		
	end subroutine con_density

end module single_step_m
