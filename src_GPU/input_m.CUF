module input_m

   use datatypes, only: particles, interactions
   use hdf5
   use hdf5_parallel_io_helper_m, only: hdf5_fileopen_read, hdf5_attribute_read
   use param, only: dim, f, dxo, irho, g, gamma, c, hsml, mass, input_file, inputf

   real(f), parameter:: vnorm(dim, 5) = reshape([-1._f, -1._f, -1._f, &
                                                  1._f,  1._f, -1._f, &
                                                 -1._f,  1._f,  1._f, &
                                                  1._f, -1._f,  1._f, &
                                                 -1._f, -1._f,  1._f], [dim, 5])

   public:: read_input_and_allocate

contains

   !==============================================================================================================================
   subroutine allocatePersistentArrays(ntotal, nvirt, maxn, maxinter_perp, maxinter, pairs, w, dwdx, itype, ind, p, &
         rho, x, vx)

      implicit none
      integer, intent(in):: ntotal, nvirt, maxinter_perp
      integer, intent(out):: maxn, maxinter
      integer, allocatable, pinned, intent(inout):: itype(:), ind(:)
      real(f), allocatable, pinned, intent(inout):: p(:), rho(:), x(:,:), vx(:,:)
      type(interactions), allocatable, intent(inout):: pairs(:)

      maxn = ntotal + nvirt!+int(0.2*ntotal)
      maxinter = maxinter_perp*maxn
      allocate( itype(maxn), ind(maxn), p(maxn), rho(maxn), x(dim,maxn), vx(dim,maxn))
      allocate( pairs(2, maxinter), w(maxinter), dwdx(dim, maxinter))

   end subroutine allocatePersistentArrays

   !==============================================================================================================================
   subroutine read_input_and_allocate(maxinter_perp, itype, ind, p, rho, x, vx, pairs, w, dwdx, maxn, maxinter, &
         ntotal, nvirt)

      implicit none
      integer, intent(in):: maxinter_perp
      integer, allocatable, pinned, intent(inout):: itype(:), ind(:)
      real(f), allocatable, pinned, intent(inout):: p(:), rho(:), x(:, :), vx(:,:)
      type(interactions), allocatable, intent(inout):: pairs(:)
      integer, intent(out):: ntotal, nvirt, maxn, maxinter
      integer:: i, j, k, d, n, ierr
      real(f):: xi, yi, zi
      integer(HID_T):: fid, gid_r, gid_v
      integer(HSIZE_T):: global_dims(2)

      ! initializing hdf5
      call h5open_f(ierr)

      ! using helper subroutine to open file
      call hdf5_fileopen_read(input_file, fid)

      ! opening real and virtual particle groups in hdf5 file
      call h5gopen_f(fid, 'real', gid_r, ierr)
      call h5gopen_f(fid, 'virt', gid_v, ierr)

      call hdf5_attribute_read(gid_r, ntotal)
      call hdf5_attribute_read(gid_v, nvirt)

      call allocatePersistentArrays(ntotal, nvirt, maxn, maxinter_perp, maxinter, pairs, w, dwdx, itype, ind, p, rho, &
         x, vx)

      ! reading real particle data from hdf5 file
      global_dims(1) = dim
      global_dims(2) = ntotal
      if (ntotal /= 0) call read_particle_data_parallel(gid_r, global_dims, itype, ind, p, rho, x, vx)

      global_dims(1) = dim
      global_dims(2) = nvirt
      if (nvirt /= 0) call read_particle_data_parallel(gid_v, global_dims, itype(ntotal+1:ntotal+nvirt), &
         ind(ntotal+1:ntotal+nvirt), p(ntotal+1:ntotal+nvirt), rho(ntotal+1:ntotal+nvirt), &
         x(:, ntotal+1:ntotal+nvirt), vx(:, ntotal+1:ntotal+nvirt))

      ! closing groups and hdf5 file
      call h5gclose_f(gid_r, ierr)
      call h5gclose_f(gid_v, ierr)
      call h5fclose_f(fid, ierr)

      ! closing hdf5
      call h5close_f(ierr)

   end subroutine read_input_and_allocate

   !===============================================================================================================================
   attributes(global) subroutine vmat_update(maxinter, n_p, nij, pij, w, vw, itype, rho, vx)

      implicit none
      integer, intent(in), value:: maxinter, n_p
      integer, intent(in):: nij, itype(n_p), pij(2, maxinter)
      real(f), intent(in):: rho(n_p), vx(dim, n_p), w(maxinter)
      ! type(interactions), intent(in):: pij(maxinter)
      real(f), intent(inout):: vw(n_p)
      integer:: i, j, k, d
      real(f):: tmp, tmp2, tw

      k = blockDim%x*(blockIdx%x - 1) + threadIdx%x

      if (k <= nij) then
         i = pij(1, k) !pij(k)%i
         j = pij(2, k) !pij(k)%j
            if (itype(i) < 0 .and. itype(j) > 0) then
               tw = kernelw(pij(k)%dx, hsml)
               tmp = mass*tw/rho(j)
               tmp2 = atomicadd(vw(i), tmp)
               tmp2 = atomicadd(rho(i), mass*tw)
               do d = 1,dim
                  tmp2 = atomicadd(vx(d, i), vnorm(d, -itype(i))*vx(d,j)*tmp)
               end do
            else if (itype(j) < 0 .and. itype(i) > 0) then
               tw = kernelw(pij(k)%dx, hsml)
               tmp = mass*tw/rho(i)
               tmp2 = atomicadd(vw(j), tmp)
               tmp2 = atomicadd(rho(j), mass*tw)
               do d = 1,dim
                  tmp2 = atomicadd(vx(d, j), vnorm(d, -itype(j))*vx(d,i)*tmp)
               end do
            end if
      end if

   end subroutine vmat_update

   !====================================================================================================================
   subroutine read_particle_data_parallel(gid_in, gdims, itype, ind, p, rho, x, vx)

      use hdf5_parallel_io_helper_m, only: hdf5_parallel_read

      implicit none
      integer(HID_T), intent(in):: gid_in
      integer(HSIZE_T), intent(in):: gdims(2)
      integer, intent(out):: itype(gdims(2)), ind(gdims(2))
      real(f), intent(out):: p(gdims(2)), rho(gdims(2)), x(gdims(1), gdims(2)), vx(gdims(1), gdims(2))
      integer(HSSIZE_T):: ldispl(2) = 0

      ! read 1d arrays
      call hdf5_parallel_read(gid_in, 'ind', ldispl(2), gdims(2), ind)
      
      call hdf5_parallel_read(gid_in, 'type', ldispl(2), gdims(2), itype)

      call hdf5_parallel_read(gid_in, 'rho', ldispl(2), gdims(2), rho)

      call hdf5_parallel_read(gid_in, 'p', ldispl(2), gdims(2), p)
      
      call hdf5_parallel_read(gid_in, 'x', ldispl, gdims, x)

      call hdf5_parallel_read(gid_in, 'v', ldispl, gdims, vx)

   end subroutine read_particle_data_parallel

   !==============================================================================================================================
   attributes(device) pure function kernelw(dx, thsml) result(tw)
      ! Contains the kernels

      use param, only: skf, pi, dims => dim

      implicit none
      real(f), intent(in):: dx(dims), thsml
      real(f):: q, factor, tw

      q = sqrt(sum(dx*dx))/thsml

      #if defined(KERNEL_CUBIC)
         #ifdef TWOD
            factor = 10._f/(7._f*pi*thsml*thsml)
         #else
            factor = 1._f/(pi*thsml*thsml*thsml)
         #endif
            tw = factor*(0.25_f*MAX(0._f, 2._f - q)**3 - MAX(0._f, 1._f - q)**3)
      #elif defined(KERNEL_QUARTIC)
         #ifdef TWOD
            factor = 96._f/(1199._f*pi*thsml*thsml)
         #else
            factor = 1._f/(20._f*pi*thsml*thsml*thsml)
         #endif
            tw = factor*(MAX(0._f, 2.5_f - q)**4 - 5_f*MAX(0._f, 1.5_f - q)**4 + 10_f*MAX(0._f, 0.5_f - q)**4)
      #elif defined(KERNEL_QUINTIC)
         #ifdef TWOD
            factor = 7._f/(478._f*pi*thsml*thsml)
         #else
            factor = 1._f/(120._f*pi*thsml*thsml*thsml)
         #endif
            tw = factor*(MAX(0._f, 3._f - q)**5 - 6._f*MAX(0._f, 2._f - q)**5 + 15._f*MAX(0._f, 1._f - q)**5)
      #elif defined(KERNEL_WQUINTIC_C4)
         #ifdef TWOD
            factor = 3._f/(1024._f*pi*thsml*thsml)
         #else
            factor = 165._f/(65536._f*pi*thsml*thsml*thsml)
         #endif
            tw = factor*MAX(0._f, 2._f - q)**6*(35._f*q**2 + 36._f*q + 12._f)
      #elif defined(KERNEL_WQUINTIC_C6)
         #ifdef TWOD
            factor = 39._f/(14336._f*pi*thsml*thsml)
         #else
            factor = 1365._f/(524288._f*pi*thsml*thsml*thsml)
         #endif
            tw = factor*MAX(0._f, 2._f - q)**8*(16._f*q**3 + 25_f*q**2 + 16._f*q + 4._f)
      #elif defined(KERNEL_GAUSSIAN)
            factor = 1_f/(thsml**dims*pi**(0.5_f*dims))
            if (q .ge. 0_f .and. q .le. 3_f) then
               tw = factor*exp(-q*q)
            end if
      #else
         #ifdef TWOD
            factor = 7._f/(64._f*pi*thsml*thsml)
         #else
            factor = 21._f/(256._f*pi*thsml*thsml*thsml)
         #endif
            tw = factor*MAX(0._f, 2._f - q)**4*(2._f*q + 1._f)
      #endif

   end function kernelw

end module input_m
